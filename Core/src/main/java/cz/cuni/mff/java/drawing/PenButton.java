package cz.cuni.mff.java.drawing;

import javax.swing.*;
import java.awt.*;

/**
 * A {@link JToggleButton} that represents a drawing pen tool with a graphical icon.
 * <p>
 * This button allows users to select a drawing pen tool. It displays an icon representing the appearance
 * of the pen's stroke. If the pen does not provide a preferred icon, a default icon is generated by simulating
 * a pen stroke from the top left to the bottom right of the icon.
 * </p>
 * <p>
 * This button is designed to be associated with the selection its pen in a {@link DrawPanelSettings} instance.
 * </p>
 */
public class PenButton extends JToggleButton {
    /**
     * The {@link Pen} associated with this button.
     */
    public final Pen pen;
    /**
     * The size for the icon displayed on the button.
     */
    private int iconSize = 40;

    /**
     * Constructs a {@code PenButton} with the specified {@link Pen}.
     * <p>
     * If the provided pen has a preferred icon, it is used for the button. Otherwise, a custom icon is
     * generated by simulating a drawing with the pen on a default image.
     * The stroke is set to black with 3px stroke width and the fill is set to a light gray.
     * </p>
     *
     * @param pen the {@link Pen} associated with this button
     */
    public PenButton(Pen pen) {
        super();
        this.pen = pen;

        Icon icon = pen.getPreferredIcon();
        if (icon != null) {
            this.setIcon(icon);
        } else {
            // Take backups of the pen settings to restore later
            int widthBackup = pen.settings.strokeWidth;
            Color backgroundBackup = pen.settings.backgroundColor;
            Color mainBackup = pen.settings.mainColor;

            // Set pen settings for simulation
            pen.settings.strokeWidth = 3;
            pen.settings.backgroundColor = Color.lightGray;
            pen.settings.mainColor = Color.BLACK;

            // Generate icon base
            var img = PictureLoader.NewImage(iconSize, iconSize, Color.WHITE);

            // Simulate mouse drag
            pen.mousePressed(5, 5, img);
            for (int i = 6; i <= iconSize - 5; i += 2) {
                pen.mouseDragged(i, i, img);
            }
            pen.mouseReleased(iconSize - 5, iconSize - 5, img);

            // Set the icon
            this.setIcon(new ImageIcon(img));

            // Restore pen settings
            pen.settings.strokeWidth = widthBackup;
            pen.settings.backgroundColor = backgroundBackup;
            pen.settings.mainColor = mainBackup;
        }
    }

    /**
     * Returns the size of the icon used for this button.
     *
     * @return the size of the icon in pixels
     */
    public int getIconSize() {
        return iconSize;
    }

    /**
     * Sets the size of the icon displayed on the button.
     *
     * @param iconSize the new size for the icon in pixels
     * @throws IllegalArgumentException if {@code iconSize} is less than or equal to zero
     */
    public void setIconSize(int iconSize) {
        if (iconSize > 0)
            this.iconSize = iconSize;
        else
            throw new IllegalArgumentException("Icon size must be positive.");
    }
}
